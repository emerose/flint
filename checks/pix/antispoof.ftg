title "Anti-Spoofing Checks"
description "Ensure the firewall does what it can to prevent fake source addresses from entering or exiting the network"
code :antispoof

interface_check :rfc1918, "Non-routable addresses cannot traverse external interface" do
  interface_types :external

  describe "RFC1918 addresses are used to number non-routable internal hosts.  Packets with source addresses from these ranges should not be transmitted by the external interface.  One way to accomplish this is with the following configuration, which creates an access list to deny the non-routable blocks, and binds it to both the in and out ACLs for the external interface.


    object-group network rfc1918
      network-object 192.168.0.0 255.255.252.0
      network-object 172.16.0.0 255.255.0.0
      network-object 10.0.0.0 255.0.0.0

    access-list rfc1918 deny ip object-group rfc1918 and
    access-list rfc1918 deny ip any object-group rfc1918
    access-group rfc1918 in interface #{interface.name}
    access-group rfc1918 out interface #{interface.name}
"

  rfc1918_addrs = CidrSet.new("192.168.0.0/16", "172.16.0.0/12", "10.0.0.0/8")

  m, lines = permit_map_select do |rule|
    ( match_acl(rule, :destination_net => rfc1918_addrs) or
      match_acl(rule, :source_net => rfc1918_addrs) )
  end
  
  if (not m.empty?) and (not lines.empty?)
    lines.select {|x| Flint::policy(x) == :permit}.each do |line|
      fail()
      affected_interface(interface)
    end
  end
end


interface_check :bogons, "Team Cymru Bogons cannot traverse external interface" do
  interface_types :external
  
  baddrs = [
            "0.0.0.0/255.0.0.0",
            "5.0.0.0/255.0.0.0",
            "14.0.0.0/255.0.0.0",
            "23.0.0.0/255.0.0.0",
            "31.0.0.0/255.0.0.0",
            "36.0.0.0/255.0.0.0",
            "37.0.0.0/255.0.0.0",
            "39.0.0.0/255.0.0.0",
            "42.0.0.0/255.0.0.0",
            "49.0.0.0/255.0.0.0",
            "50.0.0.0/255.0.0.0",
            "100.0.0.0/255.0.0.0",
            "101.0.0.0/255.0.0.0",
            "102.0.0.0/255.0.0.0",
            "103.0.0.0/255.0.0.0",
            "104.0.0.0/255.0.0.0",
            "105.0.0.0/255.0.0.0",
            "106.0.0.0/255.0.0.0",
            "107.0.0.0/255.0.0.0",
            "127.0.0.0/255.0.0.0",
            "169.254.0.0/255.255.0.0",
            "176.0.0.0/255.0.0.0",
            "177.0.0.0/255.0.0.0",
            "179.0.0.0/255.0.0.0",
            "181.0.0.0/255.0.0.0",
            "185.0.0.0/255.0.0.0",
            "192.0.2.0/255.255.255.0",
            "198.18.0.0/255.254.0.0",
            "198.51.100.0/255.255.255.0",
            "203.0.113.0/255.255.255.0",
            "223.0.0.0/255.0.0.0",
            "224.0.0.0/224.0.0.0"
           ]

  bogons = CidrSet.new(*baddrs)
  
  og_text = "object-group network cymrubogons\n"
  baddrs.each { |b|
    net, mask = b.split("/")
    og_text << "  network-object #{net} #{mask}\n"
  }
  
  describe "Team Cymru has compiled a set of unassigned and non-routable addresses, which they term Bogons.  Your external interface should not allow these packets to travese it.  The following configuration blocks them:

    #{og_text}

    access-list cymrubogons deny ip object-group cymrubogons any
    access-list cymrubogons deny ip any object-group cymrubogons
    access-group cymrubogons in interface #{interface.name}
    access-group cymrubogons out interface #{interface.name}"

  m, lines = permit_map_select do |rule|
    match_acl(rule, :destination_net => bogons) or
      match_acl(rule, :source_net => bogons)
  end
  
  if (not m.empty?) and (not lines.empty?)
    lines.select {|x| Flint::policy(x) == :permit}.each do |line|
      fail()
      affected_interface(interface)
    end
  end
  
end
